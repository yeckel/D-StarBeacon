//For T-Beam with AXP202
#include <Arduino.h>
#include <SSD1306Wire.h>
#include <RadioLib.h>
#include <TinyGPS++.h>
#include <time.h>
#include <sys/time.h>
#include <BluetoothSerial.h>
#include <pins_arduino.h>
#include <Streaming.h>
#include <axp20x.h>
#include <TimeLib.h>
#include <SPI.h>
#include <DSTAR.h>

#define LORA_CS 18      // GPIO18 - SX1276 CS
#define LORA_RST 23     // GPIO23 - SX1276 RST
#define LORA_IRQ 26     // GPIO26 - SX1276 IO0
#define LORA_IO0 LORA_IRQ  // alias
#define LORA_IO1 33     // GPIO33 - SX1276 IO1 -> wired on pcb AND connected to header pin LORA1
#define LORA_IO2 32     // GPIO32 - SX1276 IO2 -> wired on pcb AND connected to header pin LORA2

const int offset = 2 * 3600; //CEST

SX1278 radio = new Module(LORA_CS, LORA_IRQ, LORA_RST, LORA_IO1);
MorseClient morse(&radio);
SSD1306Wire display(0x3c, SDA, SCL, GEOMETRY_128_64);
TinyGPSPlus gps;
HardwareSerial GPS(1);
BluetoothSerial ESP_BT;
AXP20X_Class axp;
TaskHandle_t BeaconSenderHandler;
volatile bool m_sendMorse{false};

void checkLoraState(int state)
{
    if(state == ERR_NONE)
    {
        Serial.println(F("success!"));
    }
    else
    {
        Serial.print(F("failed, code "));
        Serial.println(state);
        while(true);
    }
}

const uint8_t preambleAndBitSync[] = {0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x76, 0x50};
const uint8_t stoppingFrame[] = {0xaa, 0xaa, 0xaa, 0xaa, 0x13, 0x5e};
#define DSTAR_HEADER_SIZE 42 //in real data(39)+crc(2)+1 padding

uint8_t dStarHeader[DSTAR_HEADER_SIZE] = {0x0, 0x0, 0x0, //flag 1,2,3
                                          0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x20, 0x20, //destination callsign
                                          0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x20, 0x20, //repeater callsign
                                          0x43, 0x51, 0x43, 0x51, 0x43, 0x51, 0x20, 0x20, //companion callsign
                                          'O', 'K', '1', 'C', 'H', 'P', 0x20, 0x20, //own callsign
                                          '7', '0', '6', ' ', //rig ID
                                          0x00, 0x00, //place for CRC
                                          0x0 //padding
                                         };

//unsigned char txData[] =
//{
//    //encodes a message "AAA$$CRCB3BF,OK1CHP-1>API705,DSTAR*:!4946.70N/01329.42E-/A=001240Playing with ic-705"
//    0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
//    0x76, 0x50,
//    0x1c, 0xb3, 0xf7, 0x32, 0x2, 0x3c, 0x15, 0x15, 0x5, 0x32, 0x85, 0x38, 0xdd, 0x84, 0x8d, 0x7a, 0xe8, 0xd6, 0xd8, 0x6d, 0x8a, 0x60, 0x9b, 0x64, 0xd9, 0xd5, 0x4c, 0xc2, 0xc8, 0x33, 0xf4, 0x5f, 0xfa, 0xc1, 0x7c, 0x1a, 0x54, 0x8, 0xf9, 0x1b, 0xc1, 0xa4, 0xef, 0x5, 0xd2, 0x43, 0x57, 0x1f, 0x67, 0x69, 0xe6, 0xbb, 0xb8, 0x71, 0x31, 0xb7, 0xb9, 0xf4, 0x6b, 0x74, 0xb, 0xb4, 0xca, 0xd5, 0x7e, 0x14, 0xd4, 0xe1, 0xe9, 0xca, 0x93, 0x8d, 0x2b, 0x56, 0x24, 0x8b, 0x52, 0xee, 0xf8, 0x75, 0x92, 0x75, 0x84, 0xdb, 0x24, 0x41, 0x20, 0x36, 0x81, 0x46, 0x41, 0x3a, 0xab, 0x46, 0x87, 0x53, 0x35, 0x41, 0xe8, 0x7c, 0x83, 0xce, 0x60, 0x30, 0xcc, 0x5, 0xf7, 0x37, 0x17, 0x49, 0xc6, 0x64, 0x81, 0xe8, 0xc0, 0xd4, 0x80, 0x48, 0x77, 0x53, 0x35, 0x41, 0xe8, 0x78, 0x92, 0xce, 0x60, 0x3a, 0x2d, 0x6e, 0xd5, 0x37, 0x16, 0x49, 0x86, 0x47, 0x83, 0x28, 0x50, 0xfc, 0xcb, 0x80, 0xb7, 0x53, 0x35, 0x41, 0xe8, 0x7c, 0x83, 0xce, 0x60, 0x38, 0xcf, 0x6a, 0xf7, 0xd7, 0x64, 0x41, 0x2c, 0x4d, 0x83, 0xe, 0xe0, 0x14, 0x0, 0x47, 0xf7, 0x37, 0x14, 0x49, 0x2, 0x77, 0x83, 0x20, 0x42, 0xfa, 0x2b, 0x0, 0x55, 0x53, 0x35, 0x41, 0xe8, 0x78, 0x93, 0xce, 0x60, 0x34, 0xc9, 0xf, 0xd7, 0x37, 0x33, 0x58, 0xce, 0x27, 0x81, 0xa0, 0x70, 0xf4, 0xcf, 0x6c, 0x37, 0x53, 0x17, 0x41, 0x64, 0x4f, 0x83, 0x8e, 0xc2, 0x19, 0x8c, 0x40, 0x77, 0x37, 0x35, 0x49, 0x4a, 0x57, 0x81, 0xa8, 0x62, 0xfa, 0x20, 0x1, 0xb5, 0x53, 0x35, 0x41, 0xe8, 0x7c, 0x83, 0xce, 0x60, 0x38, 0x23, 0xd, 0xb7, 0x37, 0x36, 0x49, 0x8e, 0x44, 0x83, 0x60, 0xe0, 0xdc, 0xc5, 0x4b, 0xf7, 0x53, 0x75, 0x41, 0xe8, 0x7c, 0x83, 0xce, 0x60, 0x30, 0xaf, 0x6c, 0xd7, 0x37, 0x37, 0x49, 0xce, 0x67, 0x81, 0xa0, 0x70, 0xfa, 0x2f, 0x87, 0xd5, 0x53, 0x35, 0x41, 0xe8, 0x78, 0x92, 0xce, 0x60, 0x38, 0x28, 0xe4, 0xb7, 0x37, 0x17, 0x49, 0xc6, 0x64, 0x81, 0xe8, 0xc0, 0xd0, 0xcc, 0x5, 0xf7, 0x53, 0x35, 0x41, 0xe8, 0x7c, 0x83, 0xce, 0x60, 0x34, 0x80, 0x48, 0x77, 0x37, 0x10, 0x58, 0x2, 0x37, 0x83, 0x20, 0x42, 0xfa, 0x2f, 0x85, 0xb5, 0x53, 0x37, 0x41, 0x6c, 0x48, 0x93, 0xc6, 0x72, 0x3e, 0x2f, 0xe6, 0x57, 0x37, 0x17, 0x49, 0xc6, 0x64, 0x81, 0xe8, 0xc0, 0xda, 0xab, 0x46, 0x87, 0x53, 0x75, 0x41, 0xe8, 0x7c, 0x83, 0xce, 0x60, 0x38, 0xcf, 0x6a, 0xf7, 0x37, 0x35, 0x49, 0x4a, 0x57, 0x81, 0xa8, 0x62, 0xf4, 0x0, 0x47, 0xf5, 0x53, 0x17, 0x41, 0x64, 0x4f, 0x83, 0x8e, 0xc2, 0x1a, 0x2c, 0x6e, 0xb7, 0x37, 0x14, 0x49, 0x2, 0x77, 0x83, 0x20, 0x42, 0xfc, 0x4d, 0x84, 0xb7, 0x53, 0x37, 0x41, 0x6c, 0x4c, 0x83, 0xc6, 0x72, 0x34, 0xcf, 0x6c, 0x37, 0x37, 0x35, 0x49, 0x4a, 0x57, 0x81, 0xa8, 0x62, 0xf9, 0x8c, 0x40, 0x75, 0x53, 0x17, 0x41, 0x64, 0x4b, 0x92, 0x8e, 0xc2, 0x1a, 0x2b, 0x89, 0xd7, 0x37, 0x31, 0x58, 0x4a, 0x17, 0x81, 0xa8, 0x62, 0xf5, 0x27, 0x6e, 0x57, 0x53, 0x75, 0x41, 0xe8, 0x7c, 0x83, 0xce, 0x60, 0x3c, 0xc5, 0x4b, 0xf7, 0x37, 0x16, 0x49, 0x86, 0x47, 0x83, 0x28, 0x50, 0xf0, 0xaf, 0x6c, 0xd5, 0x53, 0x17, 0x41, 0x64, 0x4b, 0x93, 0x8e, 0xc2, 0x1a, 0x26, 0xee, 0x57, 0x37, 0x35, 0x49, 0x4a, 0x57, 0x81, 0xa8, 0x62, 0xf6, 0x28, 0x62, 0x57, 0x53, 0x35, 0x41, 0xe8, 0x7c, 0x83, 0xce, 0x60, 0x3a, 0x2f, 0xeb, 0xb7, 0x37, 0x17, 0x49, 0xc6, 0x64, 0x81, 0xe8, 0xc0, 0xdf, 0xaf, 0xe4, 0x55, 0x53, 0x35, 0x41, 0xe8, 0x7c, 0x83, 0xce, 0x60, 0x3a, 0x23, 0xe8, 0x57, 0x37, 0x16, 0x49, 0x86, 0x47, 0x83, 0x28, 0x50, 0xf9, 0x28, 0x6e, 0x57, 0x53, 0x71, 0x50, 0xe8, 0x3c, 0x83, 0xce, 0x60, 0x3a, 0x2b, 0xe6, 0xb7, 0x37, 0x17, 0x49, 0xc6, 0x64, 0x81, 0xe8, 0xc0, 0xdb, 0xa0, 0x64, 0xb5, 0x53, 0x35, 0x41, 0xe8, 0x7c, 0x83, 0xce, 0x60, 0x3a, 0x24, 0xec, 0x57, 0x37, 0x35, 0x49, 0x4a, 0x53, 0x90, 0xa8, 0x62, 0xf0, 0x27, 0xe8, 0x57, 0x53, 0x37, 0x41, 0x6c, 0x4c, 0x83, 0xc6, 0x72, 0x3a, 0xab, 0x46, 0x87, 0x37, 0x36, 0x49, 0x8e, 0x44, 0x83, 0x60, 0xe0, 0xda, 0x2d, 0xec, 0x55, 0x53, 0x35, 0x41, 0xe8, 0x78, 0x93, 0xce, 0x60, 0x30, 0x4c, 0x44, 0xf7, 0x37, 0x35, 0x49, 0x4a, 0x57, 0x81, 0xa8, 0x62, 0xfa, 0x26, 0xc5, 0xf7, 0x53, 0x57, 0x41, 0x64, 0x4f, 0x83, 0x8e, 0xc2, 0x17, 0x81, 0x4c, 0xd7, 0x37, 0x31, 0x58, 0x4a, 0x17, 0x81, 0xa8, 0x62, 0xfa, 0x21, 0xc5, 0xf5, 0x53, 0x37, 0x41, 0x6c, 0x4c, 0x83, 0xc6, 0x72, 0x32, 0xe, 0x4c, 0xd7, 0x37, 0x14, 0x49, 0x2, 0x77, 0x83, 0x20, 0x42, 0xfa, 0x26, 0x40, 0xf7, 0x53, 0x17, 0x41, 0x64, 0x4f, 0x83, 0x8e, 0xc2, 0x1b, 0xa1, 0xec, 0x57, 0x37, 0x35, 0x49, 0x4a, 0x57, 0x81, 0xa8, 0x62, 0xf4, 0x25, 0xe7, 0x95, 0x53, 0x35, 0x41, 0xe8, 0x7c, 0x83, 0xce, 0x60, 0x36, 0x89, 0x4a, 0xf7, 0x37, 0x37, 0x49, 0xce, 0x63, 0x90, 0xa0, 0x70, 0xf2, 0x27, 0x4, 0xb7, 0x53, 0x57, 0x41, 0x64, 0x4f, 0x83, 0x8e, 0xc2, 0x18, 0xca, 0x2a, 0xf7, 0x37, 0x14, 0x49, 0x2, 0x77, 0x83, 0x20, 0x42, 0xf6, 0x89, 0x4a, 0xf5, 0x53, 0x35, 0x41, 0xe8, 0x78, 0x93, 0xce, 0x60, 0x36, 0x89, 0x4a, 0xf7, 0x37, 0x13, 0x58, 0xc6, 0x24, 0x81, 0xe8, 0xc0, 0xda, 0xaa, 0xaa, 0xaa, 0xa1, 0x35, 0xe0
//};
static constexpr uint MAX_TX_SIZE = 1024;//an arbitrary number big enoug to fit approx 800bytes takes is header plus position data
uint8_t txDataBuffer[MAX_TX_SIZE];

float f = 434.800f + 0.0024f;

uint dataBitPos{0};
uint8_t* txBuff;
uint txSize{0};

void sendData(uint8_t* buffer, uint size)
{
    txSize = sizeof(preambleAndBitSync) + size + sizeof(stoppingFrame);
    if(txSize >= MAX_TX_SIZE)
    {
        Serial << "Error: too big data to send!" << txSize;
        return;
    }
    memcpy(txDataBuffer, preambleAndBitSync, sizeof(preambleAndBitSync));//add preambleAndBitSync
    memcpy(txDataBuffer + sizeof(preambleAndBitSync), buffer, size); //add payload
    memcpy(txDataBuffer + sizeof(preambleAndBitSync) + size, stoppingFrame, sizeof(stoppingFrame)); //add stoppingFrame

    checkLoraState(radio.transmitDirect());
    Serial << "Start transmit:" << endl;
}

void dataClk()
{
    auto bytePos = dataBitPos / 8;
    auto bitPos = dataBitPos % 8;
    bool bit = txDataBuffer[bytePos] & (0b10000000 >> bitPos);
    digitalWrite(LORA_IO2, bit);
    dataBitPos += 1;    //move to next bit
    if(dataBitPos == (txSize * 8))
    {
        radio.standby();
        Serial << "Sent:" << txSize << endl;
        txSize = 0;
        dataBitPos = 0;
    }
}
void print_data(byte* data, int dataSize)
{
    for(int n = 0; n < dataSize; n++)
    {
        Serial << "0x" << _HEX(data[n]) << ",";
    }
}

void prepareAndSendDstar()
{
    uint8_t bufferConv[DSTAR_HEADER_SIZE * 2];
    Dstar.add_crc(dStarHeader);
    Serial << endl << "added crc:";
    print_data(dStarHeader, sizeof(dStarHeader));

    Dstar.convolution(dStarHeader, bufferConv);   //source, dest
    Serial << endl << "convoluted:";
    print_data(bufferConv, sizeof(bufferConv));

    Dstar.interleave(bufferConv);
    Serial << endl << "interleave:";
    print_data(bufferConv, sizeof(bufferConv));

    Dstar.pseudo_random(bufferConv, 660);
    Serial << endl << "pseudo_random:";
    print_data(bufferConv, sizeof(bufferConv));

    sendData(bufferConv, sizeof(bufferConv));
}

void setup()
{
    Dstar.size_buffer = DSTAR_HEADER_SIZE;
    Serial.begin(115200);
    radio.reset();
    Serial.print(F("[SX1278] Initializing ... "));
    pinMode(LORA_IO2, OUTPUT);
    pinMode(LORA_IO1, INPUT);

    //    checkLoraState(radio.begin(f, 10.4));
    Serial << "Start FSK:" << endl;
    checkLoraState(radio.beginFSK(f, 4.8f, 4.8 * 0.25f, 25.0f, 5, 48, false));
    checkLoraState(radio.setEncoding(RADIOLIB_ENCODING_NRZ));
    checkLoraState(radio.setDataShaping(RADIOLIB_SHAPING_0_5));
    attachInterrupt(LORA_IO1, dataClk, RISING);
    prepareAndSendDstar();
}

void loop()
{
    //    beaconSender();
}
